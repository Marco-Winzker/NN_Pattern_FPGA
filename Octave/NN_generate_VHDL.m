%==========================================================================
%
%   NN_generate_VHDL.m
%	Project: NN_Pattern_FPGA
%   Steffen Reckels, Hochschule Bonn-Rhein-Sieg, 2021
%   Based on project NN_RGB_FPGA by Thomas Florkowski
%   Release: Marco Winzker, Hochschule Bonn-Rhein-Sieg, 4.02.2022
%
%==========================================================================

%   This script generates the config file for the RGB_NN vhdl implementation
%
%   The input to the network must be in the range from 0 to 1
%
%   Load the output of the trainings process if its not currently in the
%   workspace
%   You need the variable networkStructure with the structure of the Network
%   and nnParams with the trained Network as a cell array
%
clear; close all;
%
fprintf('Starting script to generate VHDL configuration\n')
%
%input: trained network 
trainedNetworkPath  = '.\';
trainedNetworkName  = "trained_network";
formatMat           = ".mat";
%
%loading training samples and labes 
load (strcat(trainedNetworkPath,trainedNetworkName,formatMat));
%output: trained network 
trainedNetworkPathVHD   = '.\';
trainedNetworkNameVHD   = "config";
formatVHD               = ".vhd";
%
%-----------Convert to Fixed Point --------------------------

Faktor=5;   %Do not change
upscale=8;  %Do not change converts the input range from [0;1] to [0;255]

network=[]; %Create empty array for the network weights as integer 
for i=1:length(nnParams)
    nnParams{i} = ((2^Faktor)) * nnParams{i}; %All Weights
    nnParams{i}(:,end) = nnParams{i}(:,end)*((2^upscale)); %Only Bias
    nnParams{i} = int32(nnParams{i});
    network = [network reshape(nnParams{i}',1,[])];
end

%------------------- Weights as Integer --------------------
fprintf('Weight Matrix (Integer) from the Input to the Hidden Layer\n\n')
disp(nnParams{1});
fprintf('Weight Matrix (Integer) from the Hidden to the Output Layer\n\n')
disp(nnParams{2});

%----------------------- Ranges ----------------------------
%Find the ranges for the variables
[maxMultRange, maxSumRange] =findRanges(nnParams);

%-----------Create Offset Vector----------------------------
offset=cumsum(networkStructure);
offset= [0, offset]; %Add a zero to the beginning

%--------------Generate String for positions matrix---------
stringPositions = generatePositionsMatrix(networkStructure);

%-----------Vector to String--------------------------------
stringOffset = sprintf('%d,' , flip(offset));
stringOffset = stringOffset(1:end-1);% strip final comma
stringNetwork = sprintf('%d,' , flip(networkStructure));
stringNetwork = stringNetwork(1:end-1);% strip final comma
stringTheta = sprintf('%d,' , flip(network));
stringTheta = stringTheta(1:end-1);% strip final comma

%-----------Write File---------------------------------------
file= fopen(strcat(trainedNetworkPathVHD,trainedNetworkNameVHD,formatVHD),'w');
fprintf(file,'--This file is automatically generated by generate_VHDL_file.m, %s\n\n',date);
fprintf(file,'library IEEE;\n');
fprintf(file,'use IEEE.STD_LOGIC_1164.ALL;\n');
fprintf(file,'use IEEE.NUMERIC_STD.ALL;\n\n');
fprintf(file,'package CONFIG is\n');
fprintf(file,'	type INPUT is array (natural range <>) of integer range 0 to 255;\n');
fprintf(file,'	signal connection : INPUT (%d downto 0);\n',sum(networkStructure)-1);
fprintf(file,'	--connection %d downto 0 is the input of the neural network\n',networkStructure(1)-1);
fprintf(file,'	--connection %d downto %d is the output of the neural network\n\n',offset(end)-1,offset(end-1));
fprintf(file,'	-- int Arrays with Constants\n');
fprintf(file,'	type constIntArray is ARRAY (natural range <>) of integer;\n');
fprintf(file,'	constant networkStructure : constIntArray (%d downto 0) := (%s);\n',length(networkStructure)-1,stringNetwork);
fprintf(file,'	constant connnectionRange : constIntArray (%d downto 0) := (%s);\n',length(offset)-1,stringOffset);
fprintf(file,'	constant weights : constIntArray (%d downto 0) := (%s);\n\n',length(network)-1,stringTheta);
fprintf(file,'	--mapping the 2D network to the 1D Array with the weights\n');
fprintf(file,'	type KOORDINATES is array (0 to %d, 1 to %d) of natural;\n',max(networkStructure),length(networkStructure)-1);
fprintf(file,'	constant positions: KOORDINATES:=( \n');
fprintf(file,'%s);\n\n',stringPositions);
fprintf(file,'	-- Ranges for the sum inside a neuron and the multiplication of an input signal with a weight\n');
fprintf(file,'	constant maxSumRange: integer:=%d;\n',maxSumRange-1);
fprintf(file,'	constant minSumRange: integer:=%d;\n',-1*maxSumRange);
fprintf(file,'	constant maxMultRange: integer:=%d;\n',maxMultRange-1);
fprintf(file,'	constant minMultRange: integer:=%d;\n\n',-1*maxMultRange);
fprintf(file,'	-- -- Array for all multiplication results inside a neuron\n');
fprintf(file,'	type multResults is ARRAY (natural range <>) of integer range minMultRange to maxMultRange;\n');
fprintf(file,'end CONFIG;\n');
fclose(file);

fprintf('config.vhd Successfully Created\n')

